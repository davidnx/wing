// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`wing compile -t tf-aws > main.tf.json 1`] = `
{
  "//": {
    "metadata": {
      "backend": "local",
      "stackName": "root",
      "version": "0.15.2",
    },
    "outputs": {},
  },
  "provider": {
    "aws": [
      {},
    ],
  },
}
`;

exports[`wing compile -t tf-aws > preflight.js 1`] = `
"const $stdlib = require('@winglang/sdk');
const $outdir = process.env.WINGSDK_SYNTH_DIR ?? \\".\\";

function __app(target) {
	switch (target) {
		case \\"sim\\":
			return $stdlib.sim.App;
		case \\"tfaws\\":
		case \\"tf-aws\\":
			return $stdlib.tfaws.App;
		case \\"tf-gcp\\":
			return $stdlib.tfgcp.App;
		case \\"tf-azure\\":
			return $stdlib.tfazure.App;
		default:
			throw new Error(\`Unknown WING_TARGET value: \\"\${process.env.WING_TARGET ?? \\"\\"}\\"\`);
	}
}
const $App = __app(process.env.WING_TARGET);

class MyApp extends $App {
constructor() {
  super({ outdir: $outdir, name: \\"for_loop_sequence\\", plugins: $plugins });
  
  {console.log(\\"---\\\\nfor i in 0..0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,0,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: 'false'\`)})(false)};
  }};
  {console.log(\\"there's no value to iterate\\")};
  {console.log(\\"---\\\\nfor i in 0..=0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,0,true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i === 0)'\`)})((i === 0))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..2 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,2,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i < 2)'\`)})((i < 2))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..=2 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,2,true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 2)'\`)})((i <= 2))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 2..0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(2,0,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 2)'\`)})((i <= 2))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i > 0)'\`)})((i > 0))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 2..=0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(2,0,true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 2)'\`)})((i <= 2))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..-2 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,(-2),false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 0)'\`)})((i <= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i > (-2))'\`)})((i > (-2)))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..=-2 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,(-2),true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 0)'\`)})((i <= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i > (-3))'\`)})((i > (-3)))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in -2..0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator((-2),0,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= (-2))'\`)})((i >= (-2)))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i < 0)'\`)})((i < 0))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in -2..=0 { ... }\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator((-2),0,true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= (-2))'\`)})((i >= (-2)))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 0)'\`)})((i <= 0))};
    {console.log(\`\${i}\`)};
  }};
  const x = 2;
  {console.log(\\"---\\\\nfor i in 0..x { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,x,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i < 2)'\`)})((i < 2))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..=x { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,x,true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 2)'\`)})((i <= 2))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in x..0 { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(x,0,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 2)'\`)})((i <= 2))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i > 0)'\`)})((i > 0))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..(x*2) { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,(x * 2),false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i < 4)'\`)})((i < 4))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in 0..=(x*2) { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator(0,(x * 2),true);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i >= 0)'\`)})((i >= 0))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 4)'\`)})((i <= 4))};
    {console.log(\`\${i}\`)};
  }};
  {console.log(\\"---\\\\nfor i in (x*2)..0 { ... } <=> x = 2\\")};
  {function* iterator(start, end, inclusive) {
    let i = start;
    let limit = inclusive ? ((end < start) ? end - 1 : end + 1) : end;
    while (i < limit) yield i++;
    while (i > limit) yield i--;
  }
  const iter = iterator((x * 2),0,false);
  for (const i of iter) {
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i <= 4)'\`)})((i <= 4))};
    {((cond) => {if (!cond) throw new Error(\`assertion failed: '(i > 0)'\`)})((i > 0))};
    {console.log(\`\${i}\`)};
  }};
}
}
new MyApp().synth();"
`;

exports[`wing test > stdout 1`] = `
"---
for i in 0..0 { ... }
there's no value to iterate
---
for i in 0..=0 { ... }
0
---
for i in 0..2 { ... }
0
1
---
for i in 0..=2 { ... }
0
1
2
---
for i in 2..0 { ... }
2
1
---
for i in 2..=0 { ... }
2
1
0
---
for i in 0..-2 { ... }
0
-1
---
for i in 0..=-2 { ... }
0
-1
-2
---
for i in -2..0 { ... }
-2
-1
---
for i in -2..=0 { ... }
-2
-1
0
---
for i in 0..x { ... } <=> x = 2
0
1
---
for i in 0..=x { ... } <=> x = 2
0
1
2
---
for i in x..0 { ... } <=> x = 2
2
1
---
for i in 0..(x*2) { ... } <=> x = 2
0
1
2
3
---
for i in 0..=(x*2) { ... } <=> x = 2
0
1
2
3
4
---
for i in (x*2)..0 { ... } <=> x = 2
4
3
2
1
pass ─ for_loop_sequence.w (no tests)"
`;
